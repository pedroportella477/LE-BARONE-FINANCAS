
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @unique // Firebase UID
  email     String   @unique
  name      String?
  photoUrl  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfile       UserProfile?
  bills             Bill[]
  recurringBills    RecurringBill[]
  budgets           Budget[]
  financialGoals    FinancialGoal[]
  expenseCategories ExpenseCategory[]
  incomeCategories  IncomeCategory[]
}

model UserProfile {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  monthlyIncome Float     @default(0)
  cpf           String?   @db.VarChar(14) // Formato: 000.000.000-00
  cellphone     String?   @db.VarChar(15) // Formato: (00) 00000-0000
  photoUrl      String?   @db.Text // Armazena Data URL ou link para imagem
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model ExpenseCategory {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bills     Bill[]
  budgets   Budget[]
  recurringBills RecurringBill[]


  @@unique([userId, name])
}

model IncomeCategory {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bills     Bill[]
  recurringBills RecurringBill[]

  @@unique([userId, name])
}

model Bill {
  id              String    @id @default(cuid())
  payeeName       String
  amount          Float
  dueDate         DateTime  @db.Date // Apenas Data
  type            String // "expense" ou "income"
  isPaid          Boolean   @default(false)
  paymentDate     DateTime? @db.Date
  paymentReceipt  String?
  attachmentType  String? // "pdf", "pix", "barcode"
  attachmentValue String?   @db.Text
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expenseCategoryId String?
  expenseCategory   ExpenseCategory? @relation(fields: [expenseCategoryId], references: [id], onDelete: SetNull)

  incomeCategoryId String?
  incomeCategory   IncomeCategory? @relation(fields: [incomeCategoryId], references: [id], onDelete: SetNull)

  recurringBillId String?
  recurringBill   RecurringBill? @relation(fields: [recurringBillId], references: [id], onDelete: SetNull, map: "Bill_recurringBillId_fkey_optional")

  @@index([userId])
  @@index([expenseCategoryId])
  @@index([incomeCategoryId])
  @@index([recurringBillId])
}

model RecurringBill {
  id                String    @id @default(cuid())
  payeeName         String
  amount            Float
  type              String // "expense" ou "income"
  frequency         String // "daily", "weekly", "monthly", "yearly"
  interval          Int
  startDate         DateTime  @db.Date
  endDate           DateTime? @db.Date
  nextDueDate       DateTime  @db.Date
  lastGeneratedDate DateTime? @db.Date
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expenseCategoryId String?
  expenseCategory   ExpenseCategory? @relation(fields: [expenseCategoryId], references: [id], onDelete: SetNull)

  incomeCategoryId String?
  incomeCategory   IncomeCategory? @relation(fields: [incomeCategoryId], references: [id], onDelete: SetNull)
  
  generatedBills Bill[] @relation(map: "Bill_recurringBillId_fkey_optional")


  @@index([userId])
  @@index([expenseCategoryId])
  @@index([incomeCategoryId])
}

model Budget {
  id        String   @id @default(cuid())
  limit     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expenseCategoryId String
  expenseCategory   ExpenseCategory @relation(fields: [expenseCategoryId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expenseCategoryId])
  @@unique([userId, expenseCategoryId])
}

model FinancialGoal {
  id            String    @id @default(cuid())
  name          String
  targetAmount  Float
  currentAmount Float
  targetDate    DateTime? @db.Date
  icon          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
